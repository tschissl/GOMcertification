outlier
source('~/.active-rstudio-document', echo=TRUE)
View(OKUM.outlier)
View(final)
View(df0)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(final)
write.csv(final,"OKUCMall,csv", sep=";")
write.csv(final,"OKUCMall,csv")
write.csv(final,"OKUCMall.csv")
write.csv(final,"OKUCMall.csv", sep = ";")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
REE.chondrites <- read.csv("~/GitHub/REE/REE.chondrites.csv", sep=";") # reading chondrite normalisig values from file
REE.chondrites <- rename(REE.chondrites, c("norm"= "REE")) # renaming the column to make it suitable for merging
View(REE.chondrites)
REE.chondrites <- read.csv("~/GitHub/REE/REE.chondrites.csv", sep=";") # reading chondrite normalisig values from file
REE.chondrites <- rename(REE.chondrites, c("norm"= "REE")) # renaming the column to make it suitable for merging
refmat <- 'MUH' # defining the RM
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
df <- data.frame(cbind(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
names(df) <- c("date", "RM", "measurand", "mean.before", "mean.after", "median.before", "median.after", "median.after.noPP", "unit", "sL", "sbb", "sr", "u", "u.alternative", "t.value", "outlier", "labs remaining", "based on", "property value", "U") # needed only the first time
df <- df[!1,]
write.table(df, "df1.txt", row.names=FALSE) # needed only the first time
library(ggplot2) # needed for most plots in this document
# library(devtools) #needed for "order_by"
# install_github("plotflow", "trinker")
library(plotflow) #needed for "order_by" # install_github("plotflow", "trinker")
library(metRology) #for mandel k and h calculations
library(ape) # needed for varcomp (variance component) extraction
library(nlme) # needed for lme
require(plyr) # needed for ddply
library(knitr)
library(gridExtra)
opts_chunk$set(dev="png",dev.args=list(type="cairo"), dpi=300)
options(base64_images = 'inline')
#### defining the plotting theme
```{r mytheme, include=FALSE}
mytheme <- theme_grey() + theme(plot.title = element_text(colour = "black", size = rel(2))) + theme(axis.title.x = element_text(size = rel(1.8)))+ theme(axis.title.y = element_text(size = rel(1.8))) +theme(axis.text.x = element_text(size = rel(1.5))) + theme(axis.text.y = element_text(size = rel(1.5))) + theme(legend.title = element_text(size = rel(1))) +theme(legend.text = element_text(size = rel(0.8)))
refmat <- 'GAS' # defining the RM
setwd("~/GitHub/GOMcertification")
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
df <- data.frame(cbind(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
names(df) <- c("date", "RM", "measurand", "mean.before", "mean.after", "median.before", "median.after", "median.after.noPP", "unit", "sL", "sbb", "sbb", "u", "u.alternative", "t.value", "outlier", "labs remaining", "based on", "property value", "U") # needed only the first time
df <- df[!1,]
write.table(df, "df3.txt", row.names=FALSE) # needed only the first time
library(ggplot2) # needed for most plots in this document
# library(devtools) #needed for "order_by"
# install_github("plotflow", "trinker")
library(plotflow) #needed for "order_by" # install_github("plotflow", "trinker")
library(metRology) #for mandel k and h calculations
library(ape) # needed for varcomp (variance component) extraction
library(nlme) # needed for lme
require(plyr) # needed for ddply
library(knitr)
library(gridExtra)
opts_chunk$set(dev="png",dev.args=list(type="cairo"), dpi=300)
options(base64_images = 'inline')
#### defining the plotting theme
```{r mytheme, include=FALSE}
mytheme <- theme_grey() + theme(plot.title = element_text(colour = "black", size = rel(2))) + theme(axis.title.x = element_text(size = rel(1.8)))+ theme(axis.title.y = element_text(size = rel(1.8))) +theme(axis.text.x = element_text(size = rel(1.5))) + theme(axis.text.y = element_text(size = rel(1.5))) + theme(legend.title = element_text(size = rel(1))) +theme(legend.text = element_text(size = rel(0.8)))
# Data for certification project was gathered and joined in Excel. The files were exported from Excel as xxxx.csv files to make them universially readable. For this markdown the data is stored in the "root/documents" directory.
# Data is loaded ("GOMGather1.R") and merged ("GOMMerge.R") for GAS, OKUM and MUH-1 are merged together with a methods file ("OKUM.method") into a universal data.frame file named 'GOM'. All of this happens in the "Makefile.R"
setwd("~/GitHub/GOMcertification")
source("Makefile.R")
### function plot_method defined here. Automated plot of methods boxplots sorted by increasing method median. Enter with plot_method=('xx') #######
plot_method <- function(x) {
element <- x
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
prep <-  'Prep.'
method <- 'Method.'
anal.prep <- prep %p% measurand.name
anal.method <- method %p% measurand.name
anal <- GOM[[element]]
anal.prep <- GOM[[anal.prep]]
anal.method <- GOM[[anal.method]]
analyte <- data.frame(GOM$Lab, GOM$names, anal, anal.prep, anal.method )
analyte <- na.omit(analyte)
p <- ggplot(reorder_by(anal.method, ~anal, analyte, median), aes(anal.method, anal))+ geom_boxplot(outlier.shape = NA) + geom_jitter(aes(colour=anal.prep), size = 4.5, position = position_jitter(width = .2))
p + xlab("method") + ylab(unit) + labs(title = measurand.name) + labs(colour = "Prep") + mytheme
}
###### function plot_lab ####
# defined here. Automated plot of lab boxplots sorted by increasing lab mean and Horwitz function. Enter with plot_lab=('xx')
plot_lab <- function(x, type, horw = FALSE, u = FALSE) {
element <- x
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
prep <-  'Prep.'
method <- 'Method.'
anal.prep <- prep %p% measurand.name
anal.method <- method %p% measurand.name
anal <- GOM[[element]]
anal.prep <- GOM[[anal.prep]]
anal.method <- GOM[[anal.method]]
analyte <- data.frame(GOM$Lab, anal, anal.prep, anal.method )
analyte <- na.omit(analyte)
lab <- "U"
if(horw=="TRUE") {
reference.line <- median.before
switch(type,
M = hor <- 1*(0.01*reference.line)^0.8495,
T = hor <- 10000*1*(0.01*reference.line/10000)^0.8495)
u.lim <- reference.line + hor
u.2lim <- reference.line + 2*hor
l.lim <- reference.line - hor
l.2lim <- reference.line - 2*hor
} else  if (u == "TRUE") {
reference.line <- median.after
u.lim <- median.after + u2.a
u.2lim <- median.after + u2.a*t.value
l.lim <- median.after - u2.a
l.2lim <- median.after - u2.a*t.value
} else
{u.lim <- median.after
u.2lim <- median.after
l.lim <- median.after
l.2lim <- median.after
}
p <- ggplot(reorder_by(GOM.Lab, ~anal, analyte, mean), aes(GOM.Lab, anal)) + geom_abline(intercept = reference.line, slope = 0) + geom_abline(intercept = u.2lim, slope = 0, linetype ="dotted") + geom_abline(intercept = l.2lim, slope = 0, linetype = "dotted") + geom_abline(intercept = u.lim, slope = 0, linetype ="dashed") + geom_abline(intercept = l.lim, slope = 0, linetype = "dashed")#  + geom_text( x = -Inf , y = u.2lim, label = lab) # works only for horwitz also annotations does not work
p <- p + geom_boxplot(aes(fill=anal.method)) + geom_point(size=4) + geom_point(aes(colour=anal.prep), size = 3.5)
p + xlab("lab") + ylab(unit) + labs(title = measurand.name) + labs(colour = "Prep")  + geom_smooth(aes(group=1)) + mytheme
}
plot_youd <- function(a, y, z) { # a = measurand, y and z ref
'%p%' <- function(a, b) {as.character(paste (a, b, sep =""))}
switch(
y,
GAS = rm1 <- 2,
MUH = rm1 <- 1,
OKUM = rm1 <- 0
)
switch(
z,
GAS = rm2 <- 2,
MUH = rm2 <- 1,
OKUM = rm2 <- 0
)
if(rm1 > 0)
{RM1 <- a %p% '.' %p% rm1
} else
{
RM1 <- a
}
if(rm2 > 0)
{RM2 <- a %p% '.' %p% rm2
} else
{
RM2 <- a
}
if(rm1 > 1)
{RM1.s <- GOM.sd[[RM1]]} else
{RM1.s <- GOM.sd[[RM1]]/sd(GOM.median[[RM1]], na.rm = TRUE)}# calculating the normalised standard deviations
if(rm2 > 1)
{RM2.s <- GOM.sd[[RM2]]} else
{RM2.s <- GOM.sd[[RM2]]/sd(GOM.median[[RM2]], na.rm = TRUE)}# calculating the normalised standard deviations
RM1 <- GOM.median[[RM1]]
RM1 <- (RM1-median(RM1, na.rm = TRUE))/sd(RM1, na.rm = TRUE) #calculating z-scores
RM2 <- GOM.median[[RM2]]
RM2 <- (RM2-median(RM2, na.rm = TRUE))/sd(RM2, na.rm = TRUE) #calculating z-scores
RM <- data.frame(GOM.median$Lab, RM1, RM2, RM1.s, RM2.s) # creating a data frame for the measurand
# RM <- na.omit(RM) # removing all "NA"
p <- ggplot(RM, aes(RM1, RM2, label = GOM.median.Lab))  + xlim(-5, 5) + ylim(-5,5) +
geom_point(aes(colour=factor(GOM.median.Lab)), size = 4)
p <- p + xlab(y) + ylab(z) + labs(title = a) + labs(colour = "GOM.median.Lab") + mytheme +
geom_abline(intercept = 0, slope = 1) +  geom_abline(intercept = 2.8284, slope = 1) +
geom_abline(intercept = - 2.8284, slope = 1) +  geom_abline(intercept = 2.8284, slope = - 1) +
geom_abline(intercept = -2.8284, slope = - 1) + geom_text(data = NULL, x = -0.5, y = 2.85, label = "z = 2") +
geom_text(aes(colour=factor(GOM.median.Lab)), hjust=1, vjust=0) + theme(legend.position="none") #+ stat_density2d(aes(fill = ..level..), geom="polygon")
p  + geom_errorbar(aes(ymin=RM2-RM2.s, ymax=RM2+RM2.s)) + geom_errorbarh(aes(xmin=RM1-RM1.s, xmax=RM1+RM1.s))
}
## means over packets within lab
meanGOM <- function(x) mean(x, na.rm=TRUE) # defining a function for further calcuations
sdGOM <- function(x) sd(x, na.rm=TRUE) # defining a function for further calcuations, here for calculating standard deviations needed for Youden plot
meanGOM.packet <- ddply(GOM, c("Lab", "Packet"), numcolwise(meanGOM)) # calculated the mean for each Packet within each Lab by calculating the mean of days and preparations lumped together
## mean over mean of packets within lab
GOM.mean <- ddply(meanGOM.packet, c("Lab"), numcolwise(meanGOM))
GOM.mean <- merge(GOM.mean, OKUM.methods, by="Lab")
## median over packets within lab
medianGOM <- function(x) median(x, na.rm=TRUE)
medianGOM.packet <- ddply(GOM, c("Lab", "Packet"), numcolwise(medianGOM))
GOM.sd <- ddply(medianGOM.packet, c("Lab"), numcolwise(sdGOM))
## median over median of packets within lab
GOM.median <- ddply(medianGOM.packet, c("Lab"), numcolwise(medianGOM))
GOM.median <- merge(GOM.median, OKUM.methods, by="Lab")
REE.chondrites <- read.csv("~/GitHub/REE/REE.chondrites.csv", sep=";") # reading chondrite normalisig values from file
REE.chondrites <- rename(REE.chondrites, c("norm"= "REE")) # renaming the column to make it suitable for merging
REE <- c("La","Ce","Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu") # needed for extracting the REE from the final table sheet
RM <- read.table("~/GitHub/SMcertification/CV2.txt", header=TRUE, quote="\"") # reading all the finalised property values
RM.REE <- subset(RM, measurand %in% REE, select=c(RM,measurand,PV)) # extacting onl the REE values
RM.REE <- rename(RM.REE, c("measurand"="REE")) # renaming the column head suitable for merging
RM.REE <- merge(REE.chondrites, RM.REE, by = "REE", all.x=TRUE) # merging the data set so that element Pm is also included
RM.normalised <- ddply(RM.REE, c("RM"), transform, normalised = PV/chondrite) # adding a chondrite normalised column
RM.normalised[15,5] <- (RM.normalised[9,5]+RM.normalised[11,5])/2
View(RM.normalised)
RM.normalised[15,5] <- (RM.normalised[9,5]+RM.normalised[11,5])/2
REEtheme <- theme_grey() + theme(plot.title = element_text(colour = "black", size = rel(2)))+ theme(axis.title.x = element_text(size = rel(1.8)))+ theme(axis.title.y = element_text(size = rel(1.8)))+theme(axis.text.x = element_text(size = rel(1.2))) + theme(axis.text.y = element_text(size = rel(1.2)))
p <- ggplot(data=RM.normalised, aes(x=REE, y=normalised, group=1)) + geom_line(size= 1.2)
p + scale_x_discrete(limits=c("La","Ce","Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu"))  + coord_trans(y="log2") + REEtheme
source('~/.active-rstudio-document', echo=TRUE)
### function plot_method defined here. Automated plot of methods boxplots sorted by increasing method median. Enter with plot_method=('xx') #######
plot_method <- function(x) {
element <- x
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
prep <-  'Prep.'
method <- 'Method.'
anal.prep <- prep %p% measurand.name
anal.method <- method %p% measurand.name
anal <- GOM[[element]]
anal.prep <- GOM[[anal.prep]]
anal.method <- GOM[[anal.method]]
analyte <- data.frame(GOM$Lab, GOM$names, anal, anal.prep, anal.method )
analyte <- na.omit(analyte)
p <- ggplot(reorder_by(anal.method, ~anal, analyte, median), aes(anal.method, anal))+ geom_boxplot(outlier.shape = NA) + geom_jitter(aes(colour=anal.prep), size = 4.5, position = position_jitter(width = .2))
p + xlab("method") + ylab(unit) + labs(title = measurand.name) + labs(colour = "Prep") + geom_text(data = NULL, x = -0.5, y = 2.85, label = "z = 2") + mytheme
}
plot_method(measurand)
plot_lab(measurand, MorT, horw=TRUE, u =FALSE)
plot_method(measurand)
##### function plot_lab ####
# defined here. Automated plot of lab boxplots sorted by increasing lab mean and Horwitz function. Enter with plot_lab=('xx')
plot_lab <- function(x, type, horw = FALSE, u = FALSE) {
element <- x
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
prep <-  'Prep.'
method <- 'Method.'
anal.prep <- prep %p% measurand.name
anal.method <- method %p% measurand.name
anal <- GOM[[element]]
anal.prep <- GOM[[anal.prep]]
anal.method <- GOM[[anal.method]]
analyte <- data.frame(GOM$Lab, anal, anal.prep, anal.method )
analyte <- na.omit(analyte)
lab <- "U"
if(horw=="TRUE") {
reference.line <- median.before
switch(type,
M = hor <- 1*(0.01*reference.line)^0.8495,
T = hor <- 10000*1*(0.01*reference.line/10000)^0.8495)
u.lim <- reference.line + hor
u.2lim <- reference.line + 2*hor
l.lim <- reference.line - hor
l.2lim <- reference.line - 2*hor
} else  if (u == "TRUE") {
reference.line <- median.after
u.lim <- median.after + u2.a
u.2lim <- median.after + u2.a*t.value
l.lim <- median.after - u2.a
l.2lim <- median.after - u2.a*t.value
} else
{u.lim <- median.after
u.2lim <- median.after
l.lim <- median.after
l.2lim <- median.after
}
p <- ggplot(reorder_by(GOM.Lab, ~anal, analyte, mean), aes(GOM.Lab, anal)) + geom_abline(intercept = reference.line, slope = 0) + geom_abline(intercept = u.2lim, slope = 0, linetype ="dotted") + geom_abline(intercept = l.2lim, slope = 0, linetype = "dotted") + geom_abline(intercept = u.lim, slope = 0, linetype ="dashed") + geom_abline(intercept = l.lim, slope = 0, linetype = "dashed")  + geom_text( x = -Inf , y = u.2lim, label = lab) # works only for horwitz also annotations does not work
p <- p + geom_boxplot(aes(fill=anal.method)) + geom_point(size=4) + geom_point(aes(colour=anal.prep), size = 3.5)
p + xlab("lab") + ylab(unit) + labs(title = measurand.name) + labs(colour = "Prep")  + geom_smooth(aes(group=1)) + mytheme
}
plot_lab(measurand, MorT, horw=TRUE, u =FALSE)
##### function plot_lab ####
# defined here. Automated plot of lab boxplots sorted by increasing lab mean and Horwitz function. Enter with plot_lab=('xx')
plot_lab <- function(x, type, horw = FALSE, u = FALSE) {
element <- x
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
prep <-  'Prep.'
method <- 'Method.'
anal.prep <- prep %p% measurand.name
anal.method <- method %p% measurand.name
anal <- GOM[[element]]
anal.prep <- GOM[[anal.prep]]
anal.method <- GOM[[anal.method]]
analyte <- data.frame(GOM$Lab, anal, anal.prep, anal.method )
analyte <- na.omit(analyte)
lab <- "U"
if(horw=="TRUE") {
reference.line <- median.before
switch(type,
M = hor <- 1*(0.01*reference.line)^0.8495,
T = hor <- 10000*1*(0.01*reference.line/10000)^0.8495)
u.lim <- reference.line + hor
u.2lim <- reference.line + 2*hor
l.lim <- reference.line - hor
l.2lim <- reference.line - 2*hor
} else  if (u == "TRUE") {
reference.line <- median.after
u.lim <- median.after + u2.a
u.2lim <- median.after + u2.a*t.value
l.lim <- median.after - u2.a
l.2lim <- median.after - u2.a*t.value
} else
{u.lim <- median.after
u.2lim <- median.after
l.lim <- median.after
l.2lim <- median.after
}
p <- ggplot(reorder_by(GOM.Lab, ~anal, analyte, mean), aes(GOM.Lab, anal)) + geom_abline(intercept = reference.line, slope = 0) + geom_abline(intercept = u.2lim, slope = 0, linetype ="dotted") + geom_abline(intercept = l.2lim, slope = 0, linetype = "dotted") + geom_abline(intercept = u.lim, slope = 0, linetype ="dashed") + geom_abline(intercept = l.lim, slope = 0, linetype = "dashed")  + geom_text( x = 1 , y = u.2lim, label = lab) # works only for horwitz also annotations does not work
p <- p + geom_boxplot(aes(fill=anal.method)) + geom_point(size=4) + geom_point(aes(colour=anal.prep), size = 3.5)
p + xlab("lab") + ylab(unit) + labs(title = measurand.name) + labs(colour = "Prep")  + geom_smooth(aes(group=1)) + mytheme
}
plot_lab(measurand, MorT, horw=TRUE, u =FALSE)
##### function plot_lab ####
# defined here. Automated plot of lab boxplots sorted by increasing lab mean and Horwitz function. Enter with plot_lab=('xx')
plot_lab <- function(x, type, horw = FALSE, u = FALSE) {
element <- x
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
prep <-  'Prep.'
method <- 'Method.'
anal.prep <- prep %p% measurand.name
anal.method <- method %p% measurand.name
anal <- GOM[[element]]
anal.prep <- GOM[[anal.prep]]
anal.method <- GOM[[anal.method]]
analyte <- data.frame(GOM$Lab, anal, anal.prep, anal.method )
analyte <- na.omit(analyte)
lab <- "U"
if(horw=="TRUE") {
reference.line <- median.before
switch(type,
M = hor <- 1*(0.01*reference.line)^0.8495,
T = hor <- 10000*1*(0.01*reference.line/10000)^0.8495)
u.lim <- reference.line + hor
u.2lim <- reference.line + 2*hor
l.lim <- reference.line - hor
l.2lim <- reference.line - 2*hor
} else  if (u == "TRUE") {
reference.line <- median.after
u.lim <- median.after + u2.a
u.2lim <- median.after + u2.a*t.value
l.lim <- median.after - u2.a
l.2lim <- median.after - u2.a*t.value
} else
{u.lim <- median.after
u.2lim <- median.after
l.lim <- median.after
l.2lim <- median.after
}
p <- ggplot(reorder_by(GOM.Lab, ~anal, analyte, mean), aes(GOM.Lab, anal)) + geom_abline(intercept = reference.line, slope = 0) + geom_abline(intercept = u.2lim, slope = 0, linetype ="dotted") + geom_abline(intercept = l.2lim, slope = 0, linetype = "dotted") + geom_abline(intercept = u.lim, slope = 0, linetype ="dashed") + geom_abline(intercept = l.lim, slope = 0, linetype = "dashed")  + geom_text( x = 1 , y = u.2lim, label = lab) # works only for horwitz also annotations does not work
p <- p + geom_boxplot(aes(fill=anal.method)) + geom_point(size=4) + geom_point(aes(colour=anal.prep), size = 3.5)
p + xlab("lab") + ylab(unit) + labs(title = measurand.name) + labs(colour = "Prep")  + geom_smooth(aes(group=1)) + mytheme
}
plot_lab(measurand, MorT, horw=TRUE, u =FALSE)
##### function plot_lab ####
# defined here. Automated plot of lab boxplots sorted by increasing lab mean and Horwitz function. Enter with plot_lab=('xx')
plot_lab <- function(x, type, horw = FALSE, u = FALSE) {
element <- x
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
prep <-  'Prep.'
method <- 'Method.'
anal.prep <- prep %p% measurand.name
anal.method <- method %p% measurand.name
anal <- GOM[[element]]
anal.prep <- GOM[[anal.prep]]
anal.method <- GOM[[anal.method]]
analyte <- data.frame(GOM$Lab, anal, anal.prep, anal.method )
analyte <- na.omit(analyte)
lab <- "U"
if(horw=="TRUE") {
reference.line <- median.before
switch(type,
M = hor <- 1*(0.01*reference.line)^0.8495,
T = hor <- 10000*1*(0.01*reference.line/10000)^0.8495)
u.lim <- reference.line + hor
u.2lim <- reference.line + 2*hor
l.lim <- reference.line - hor
l.2lim <- reference.line - 2*hor
lab <- 2*hor
} else  if (u == "TRUE") {
reference.line <- median.after
u.lim <- median.after + u2.a
u.2lim <- median.after + u2.a*t.value
l.lim <- median.after - u2.a
l.2lim <- median.after - u2.a*t.value
} else
{u.lim <- median.after
u.2lim <- median.after
l.lim <- median.after
l.2lim <- median.after
}
p <- ggplot(reorder_by(GOM.Lab, ~anal, analyte, mean), aes(GOM.Lab, anal)) + geom_abline(intercept = reference.line, slope = 0) + geom_abline(intercept = u.2lim, slope = 0, linetype ="dotted") + geom_abline(intercept = l.2lim, slope = 0, linetype = "dotted") + geom_abline(intercept = u.lim, slope = 0, linetype ="dashed") + geom_abline(intercept = l.lim, slope = 0, linetype = "dashed")  + geom_text( x = 1 , y = u.2lim, label = lab) # works only for horwitz also annotations does not work
p <- p + geom_boxplot(aes(fill=anal.method)) + geom_point(size=4) + geom_point(aes(colour=anal.prep), size = 3.5)
p + xlab("lab") + ylab(unit) + labs(title = measurand.name) + labs(colour = "Prep")  + geom_smooth(aes(group=1)) + mytheme
}
plot_lab(measurand, MorT, horw=TRUE, u =FALSE)
##### function plot_lab ####
# defined here. Automated plot of lab boxplots sorted by increasing lab mean and Horwitz function. Enter with plot_lab=('xx')
plot_lab <- function(x, type, horw = FALSE, u = FALSE) {
element <- x
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
prep <-  'Prep.'
method <- 'Method.'
anal.prep <- prep %p% measurand.name
anal.method <- method %p% measurand.name
anal <- GOM[[element]]
anal.prep <- GOM[[anal.prep]]
anal.method <- GOM[[anal.method]]
analyte <- data.frame(GOM$Lab, anal, anal.prep, anal.method )
analyte <- na.omit(analyte)
lab <- "U"
if(horw=="TRUE") {
reference.line <- median.before
switch(type,
M = hor <- 1*(0.01*reference.line)^0.8495,
T = hor <- 10000*1*(0.01*reference.line/10000)^0.8495)
u.lim <- reference.line + hor
u.2lim <- reference.line + 2*hor
l.lim <- reference.line - hor
l.2lim <- reference.line - 2*hor
lab <- "2*hor"
} else  if (u == "TRUE") {
reference.line <- median.after
u.lim <- median.after + u2.a
u.2lim <- median.after + u2.a*t.value
l.lim <- median.after - u2.a
l.2lim <- median.after - u2.a*t.value
} else
{u.lim <- median.after
u.2lim <- median.after
l.lim <- median.after
l.2lim <- median.after
}
p <- ggplot(reorder_by(GOM.Lab, ~anal, analyte, mean), aes(GOM.Lab, anal)) + geom_abline(intercept = reference.line, slope = 0) + geom_abline(intercept = u.2lim, slope = 0, linetype ="dotted") + geom_abline(intercept = l.2lim, slope = 0, linetype = "dotted") + geom_abline(intercept = u.lim, slope = 0, linetype ="dashed") + geom_abline(intercept = l.lim, slope = 0, linetype = "dashed")  + geom_text( x = 1 , y = u.2lim, label = lab) # works only for horwitz also annotations does not work
p <- p + geom_boxplot(aes(fill=anal.method)) + geom_point(size=4) + geom_point(aes(colour=anal.prep), size = 3.5)
p + xlab("lab") + ylab(unit) + labs(title = measurand.name) + labs(colour = "Prep")  + geom_smooth(aes(group=1)) + mytheme
}
plot_lab(measurand, MorT, horw=TRUE, u =FALSE)
plot_lab(measurand, MorT, horw = FALSE, u = TRUE)
##### function plot_lab ####
# defined here. Automated plot of lab boxplots sorted by increasing lab mean and Horwitz function. Enter with plot_lab=('xx')
plot_lab <- function(x, type, horw = FALSE, u = FALSE) {
element <- x
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
prep <-  'Prep.'
method <- 'Method.'
anal.prep <- prep %p% measurand.name
anal.method <- method %p% measurand.name
anal <- GOM[[element]]
anal.prep <- GOM[[anal.prep]]
anal.method <- GOM[[anal.method]]
analyte <- data.frame(GOM$Lab, anal, anal.prep, anal.method )
analyte <- na.omit(analyte)
lab <- "U"
if(horw=="TRUE") {
reference.line <- median.before
switch(type,
M = hor <- 1*(0.01*reference.line)^0.8495,
T = hor <- 10000*1*(0.01*reference.line/10000)^0.8495)
u.lim <- reference.line + hor
u.2lim <- reference.line + 2*hor
l.lim <- reference.line - hor
l.2lim <- reference.line - 2*hor
lab <- "2*hor"
} else  if (u == "TRUE") {
reference.line <- median.after
u.lim <- median.after + u2.a
u.2lim <- median.after + u2.a*t.value
l.lim <- median.after - u2.a
l.2lim <- median.after - u2.a*t.value
lab <- "U"
} else
{u.lim <- median.after
u.2lim <- median.after
l.lim <- median.after
l.2lim <- median.after
}
p <- ggplot(reorder_by(GOM.Lab, ~anal, analyte, mean), aes(GOM.Lab, anal)) + geom_abline(intercept = reference.line, slope = 0) + geom_abline(intercept = u.2lim, slope = 0, linetype ="dotted") + geom_abline(intercept = l.2lim, slope = 0, linetype = "dotted") + geom_abline(intercept = u.lim, slope = 0, linetype ="dashed") + geom_abline(intercept = l.lim, slope = 0, linetype = "dashed")  + geom_text( x = -inf , y = u.2lim, label = lab) # works only for horwitz also annotations does not work
p <- p + geom_boxplot(aes(fill=anal.method)) + geom_point(size=4) + geom_point(aes(colour=anal.prep), size = 3.5)
p + xlab("lab") + ylab(unit) + labs(title = measurand.name) + labs(colour = "Prep")  + geom_smooth(aes(group=1)) + mytheme
}
plot_lab(measurand, MorT, horw=TRUE, u =FALSE)
##### function plot_lab ####
# defined here. Automated plot of lab boxplots sorted by increasing lab mean and Horwitz function. Enter with plot_lab=('xx')
plot_lab <- function(x, type, horw = FALSE, u = FALSE) {
element <- x
'%p%' <- function(x, y) {as.character(paste (x, y, sep =""))}
prep <-  'Prep.'
method <- 'Method.'
anal.prep <- prep %p% measurand.name
anal.method <- method %p% measurand.name
anal <- GOM[[element]]
anal.prep <- GOM[[anal.prep]]
anal.method <- GOM[[anal.method]]
analyte <- data.frame(GOM$Lab, anal, anal.prep, anal.method )
analyte <- na.omit(analyte)
lab <- "U"
if(horw=="TRUE") {
reference.line <- median.before
switch(type,
M = hor <- 1*(0.01*reference.line)^0.8495,
T = hor <- 10000*1*(0.01*reference.line/10000)^0.8495)
u.lim <- reference.line + hor
u.2lim <- reference.line + 2*hor
l.lim <- reference.line - hor
l.2lim <- reference.line - 2*hor
lab <- "2*hor"
} else  if (u == "TRUE") {
reference.line <- median.after
u.lim <- median.after + u2.a
u.2lim <- median.after + u2.a*t.value
l.lim <- median.after - u2.a
l.2lim <- median.after - u2.a*t.value
lab <- "U"
} else
{u.lim <- median.after
u.2lim <- median.after
l.lim <- median.after
l.2lim <- median.after
}
p <- ggplot(reorder_by(GOM.Lab, ~anal, analyte, mean), aes(GOM.Lab, anal)) + geom_abline(intercept = reference.line, slope = 0) + geom_abline(intercept = u.2lim, slope = 0, linetype ="dotted") + geom_abline(intercept = l.2lim, slope = 0, linetype = "dotted") + geom_abline(intercept = u.lim, slope = 0, linetype ="dashed") + geom_abline(intercept = l.lim, slope = 0, linetype = "dashed")  + geom_text( x = -Inf , y = u.2lim, label = lab) # works only for horwitz also annotations does not work
p <- p + geom_boxplot(aes(fill=anal.method)) + geom_point(size=4) + geom_point(aes(colour=anal.prep), size = 3.5)
p + xlab("lab") + ylab(unit) + labs(title = measurand.name) + labs(colour = "Prep")  + geom_smooth(aes(group=1)) + mytheme
}
plot_lab(measurand, MorT, horw=TRUE, u =FALSE)
plot_lab(measurand, MorT, horw = FALSE, u = TRUE)
